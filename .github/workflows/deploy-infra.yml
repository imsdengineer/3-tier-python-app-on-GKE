##      V1.0.1        Imran Ali         Updated Workflow with auth + fixes     22/05/2025

name: Deploy GKE Infrastructure

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  TF_WORKSPACE: "my-new-env"  # Terraform workspace name

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"

    - name: Configure GCP Credentials
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ env.GKE_SA_KEY }}
        export_default_credentials: true

  deploy-infra:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure GCP Credentials
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ env.GKE_SA_KEY }}
        export_default_credentials: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.0.0
          
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init
        terraform workspace new $TF_WORKSPACE || true
        terraform workspace select $TF_WORKSPACE

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan -var="project_id=${{ env.PROJECT_ID }}" \
                      -var="cluster_name=my-new-env" \
                      -refresh=true \
                      -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve -refresh=true tfplan

    - name: Configure Private Cluster Access
      working-directory: ./terraform
      run: |
        # Get cluster details
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        REGION=$(terraform output -raw region)
        
        # Configure private cluster access
        gcloud container clusters get-credentials $CLUSTER_NAME \
          --region $REGION \
          --internal-ip
        
        # Create minimal kubeconfig
        kubectl config view --minify --flatten > kubeconfig-private.yaml
        
        # Store kubeconfig
        echo "KUBE_CONFIG=$(cat kubeconfig-private.yaml | base64 -w 0)" >> $GITHUB_ENV
        mkdir -p $HOME/.kube
        cp kubeconfig-private.yaml $HOME/.kube/gke-config

    - name: Upload Kubeconfig
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig
        path: $HOME/.kube/gke-config
        retention-days: 1

  destroy-on-demand:
    if: github.event.inputs.destroy == 'true'
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure GCP Credentials
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ env.GKE_SA_KEY }}
        export_default_credentials: true

    - name: Verify Cluster Access
      run: |
          kubectl cluster-info
          kubectl get nodes

    - name: Terraform Destroy
      working-directory: ./terraform
      run: |
        terraform init
        terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE
        terraform destroy -auto-approve \
                         -var="project_id=${{ env.PROJECT_ID }}" \
                         -var="cluster_name=my-new-env"
        terraform workspace select default
        terraform workspace delete $TF_WORKSPACE
